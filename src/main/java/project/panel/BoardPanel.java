package project.panel;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import project.Application;
import static project.Application.IMAGE;
import project.ball.Ball;
import project.ball.BallSize;
import project.ball.BallSpeed;
import project.ball.mode.BallDirectionMode;
import project.ball.mode.RandomBallDirectionMode;
import project.ball.mode.StraightBallDirectionMode;
import project.common.Point;

public class BoardPanel extends javax.swing.JPanel {

    public static final int VERTICAL_BORDER = 66;
    public static final int HORIZONTAL_BORDER = 60;

    public static final int POCKET_RADIUS = 29;
    public static final Point LEFT_TOP_CORNER = new Point(90, 75);
    public static final Point RIGHT_TOP_CORNER = new Point(810, 75);
    public static final Point LEFT_BOTTOM_CORNER = new Point(90, 525);
    public static final Point RIGHT_BOTTOM_CORNER = new Point(810, 525);

    public static final List<Point> POCKETS = new CopyOnWriteArrayList<>();

    private BallDirectionMode currentMode;
    private RandomBallDirectionMode randomMode;
    private StraightBallDirectionMode straightMode;

    private final List<Ball> balls = new ArrayList<>();
    private final BufferedImage BOARD_IMAGE = IMAGE.getSubimage(0, 0, 1500, 1000);

    public BoardPanel() {
        initComponents();
    }

    public void init(Application application) {
        randomMode = new RandomBallDirectionMode(balls, application);
        straightMode = new StraightBallDirectionMode(balls, application);

        initPockets();
    }

    private void initPockets() {
        //top: left, center, right
        POCKETS.add(new Point(VERTICAL_BORDER + 6, HORIZONTAL_BORDER - 6));
        POCKETS.add(new Point(getWidth() / 2 + 2, 34));
        POCKETS.add(new Point(getWidth() - VERTICAL_BORDER - 3, HORIZONTAL_BORDER - 6));

        //bottom: left, center, right
        POCKETS.add(new Point(VERTICAL_BORDER + 6, getHeight() - HORIZONTAL_BORDER + 3));
        POCKETS.add(new Point(getWidth() / 2 + 2, getHeight() - 38));
        POCKETS.add(new Point(getWidth() - VERTICAL_BORDER - 3, getHeight() - HORIZONTAL_BORDER + 3));
    }

    public synchronized void addBall(Ball ball) {
        balls.add(ball);
    }

    public synchronized void removeBall(Ball ball) {
        balls.remove(ball);
    }

    @Override
    protected synchronized void paintComponent(Graphics g) {
        super.paintComponent(g);

        g.drawImage(BOARD_IMAGE, 0, 0, getWidth(), getHeight(), this);

        Graphics2D g2d = (Graphics2D) g.create();
        // Add transparent
        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
        g2d.setColor(Color.YELLOW);

        for (Point pocket : POCKETS) {
            g2d.fillOval(pocket.getX() - POCKET_RADIUS, pocket.getY() - POCKET_RADIUS,
                    POCKET_RADIUS * 2, POCKET_RADIUS * 2);
        }
        for (Ball b : balls) {
            b.draw(g);
        }
    }

    public void start(boolean random, BallSize ballSize, BallSpeed ballSpeed,
            boolean initialBlueBallWaitsRedBall) {
        if (random) {
            currentMode = randomMode;
        } else {
            currentMode = straightMode;
        }

        currentMode.init(ballSize, ballSpeed);
        currentMode.start(initialBlueBallWaitsRedBall);
    }

    public void stop() {
        currentMode.stop();
    }

    public void addAdditionalRedBalls(int count, BallSize ballSize, BallSpeed ballSpeed) {
        currentMode.setBallSizeAndBallSpeed(ballSize, ballSpeed);
        currentMode.addRedBalls(count);
    }

    public void addAdditionalBlueBalls(int count, BallSize ballSize, BallSpeed ballSpeed) {
        currentMode.setBallSizeAndBallSpeed(ballSize, ballSpeed);
        currentMode.addBlueBalls(count);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
